// Based on Alfalfa_Zonal_Stat; following revision has been made.
// 1. Harmonized TM and ETM+ to OLI: https://developers.google.com/earth-engine/tutorials/community/landsat-etm-to-oli-harmonization
// 2. Calculated NDVI, EVI, and LSWI to be used as Image Collection to extract values from. 
// 3. Change to the latest surface reflectance data.
// Edited on 11/14/2022, corrected the scale and offset
// Edited on 11/18/2022, use the location of towers to create buffers as zones for zonal statistics
// https://developers.google.com/earth-engine/tutorials/community/extract-raster-values-for-points

var GRL_alf = ee.FeatureCollection("projects/geemapyutingzhou/assets/Alfalfa_GRL_concise");
print(GRL_alf)
Map.addLayer(GRL_alf)

var pts = ee.FeatureCollection([
  ee.Feature(ee.Geometry.Point([-98.0265, 35.56092]), {plot_id: 1}), //1 is rainfed and 2 is irrigated.
  ee.Feature(ee.Geometry.Point([-98.0394, 35.57828]), {plot_id: 2})
]);

// function to generate circular or square regions from buffered points
function bufferPoints(radius, bounds) {
  return function(pt) {
    pt = ee.Feature(pt);
    return bounds ? pt.buffer(radius).bounds() : pt.buffer(radius);
  };
}

var fields = pts.map(bufferPoints(75,false));
Map.addLayer(fields)

//function to mask cloud and shadow pixels
function fmask(img) {
  var cloudShadowBitMask = 1 << 3;
  var cloudsBitMask = 1 << 5;
  var qa = img.select('pixel_qa');
  var mask = qa.bitwiseAnd(cloudShadowBitMask)
                .eq(0)
                .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return img.updateMask(mask);
}

// Function to get and rename bands of interest from OLI.
function renameOli(img) {
  return img.select(
      ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7', 'QA_PIXEL'],
      ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa']);
}

// Function to get and rename bands of interest from TM/ETM+.
function renameEtm(img) {
  return img.select(
      ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL'],
      ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa']);
}

// Applies scaling factors.
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  return image.addBands(opticalBands, null, true)
}

// Define coefficients to be used in harmonization transformation
var coefficients = {
  itcps: ee.Image.constant([0.0003, 0.0088, 0.0061, 0.0412, 0.0254, 0.0172]),
  slopes: ee.Image.constant([0.8474, 0.8483, 0.9047, 0.8462, 0.8937, 0.9071])
};  

//Function to apply harmonization transformation 
function etmToOli(img) {
  return img.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'])
      .multiply(coefficients.slopes)
      .add(coefficients.itcps)
      // .round()
      // .toShort()
      .addBands(img.select('pixel_qa'))
      .copyProperties(img,img.propertyNames());
}

// Prepares (cloud masks and renames) OLI images.
function prepOli(img) {
  img = renameOli(img);
  img = fmask(img);
  return img;
}

// Prepares (cloud masks and renames) TM/ETM+ images.
function prepEtm(img) {
  img = renameEtm(img);
  img = fmask(img);
  img = etmToOli(img)
  return img;
}

//Get the Landsat surface reflectance collections for OLI, ETM+, and TM sensors.
var oliCol = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filterDate("2019-01-01","2022-12-31")
  .filterBounds(GRL_alf)
  .map(applyScaleFactors)
  .map(prepOli);
print(oliCol)


var etmCol = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2') 
  .filterDate("2019-01-01","2022-12-31")
  .filterBounds(GRL_alf)
  .map(applyScaleFactors)
  .map(prepEtm);
print(etmCol)

// var tmCol = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2') 
//   .filterDate("2019-01-01","2022-12-31")
//   .filterBounds(fields)
//   .map(prepEtm);

// Merge the collections.  
// var landsatCol = oliCol.merge(etmCol).merge(tmCol);
var landsatCol = oliCol.merge(etmCol)
// print(landsatCol)

// Function to calculate vegetation indices (VIs). 
var vegetationindex=function(img){
          var qa=img.select('pixel_qa')
          var ndvi=img.normalizedDifference(['NIR','Red']).multiply(10000);
          var lswi=img.normalizedDifference(['NIR','SWIR1']).multiply(10000);
          var evi=img.expression(
            '2.5 * (nir - red) / (nir + 6 * red - 7.5 * blue + 1)',
            {
              red: img.select('Red'),    
              nir: img.select('NIR'),    
              blue: img.select('Blue')   
            }
            ).multiply(10000);

          return img.select([])
                      .addBands([ndvi,evi,lswi,qa])
                      .select([0,1,2,3],['ndvi','evi','lswi','pixel_qa'])
                       
}

var landsatColVI=landsatCol.map(vegetationindex)
print(landsatColVI)

// function to extract image pixel neighborhood statistics for a given region
function zonalStats(ic, fc, params) {
  // Initialize internal params dictionary.
  var _params = {
    reducer: ee.Reducer.mean(),
    scale: null,
    crs: null,
    bands: null,
    bandsRename: null,
    imgProps: null,
    imgPropsRename: null,
    datetimeName: 'datetime',
    datetimeFormat: 'YYYY-MM-dd HH:mm:ss'
  };

  // Replace initialized params with provided params.
  if (params) {
    for (var param in params) {
      _params[param] = params[param] || _params[param];
    }
  }

  // Set default parameters based on an image representative.
  var imgRep = ic.first();
  var nonSystemImgProps = ee.Feature(null)
    .copyProperties(imgRep).propertyNames();
  if (!_params.bands) _params.bands = imgRep.bandNames();
  if (!_params.bandsRename) _params.bandsRename = _params.bands;
  if (!_params.imgProps) _params.imgProps = nonSystemImgProps;
  if (!_params.imgPropsRename) _params.imgPropsRename = _params.imgProps;

  // Map the reduceRegions function over the image collection.
  var results = ic.map(function(img) {
    // Select bands (optionally rename), set a datetime & timestamp property.
    img = ee.Image(img.select(_params.bands, _params.bandsRename))
      .set(_params.datetimeName, img.date().format(_params.datetimeFormat))
      .set('timestamp', img.get('system:time_start'));

    // Define final image property dictionary to set in output features.
    var propsFrom = ee.List(_params.imgProps)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var propsTo = ee.List(_params.imgPropsRename)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var imgProps = img.toDictionary(propsFrom).rename(propsFrom, propsTo);

    // Subset points that intersect the given image.
    var fcSub = fc.filterBounds(img.geometry());

    // Reduce the image by regions.
    return img.reduceRegions({
      collection: fcSub,
      reducer: _params.reducer,
      scale: _params.scale,
      crs: _params.crs
    })
    // Add metadata to each feature.
    .map(function(f) {
      return f.set(imgProps);
    });
  }).flatten().filter(ee.Filter.notNull(_params.bandsRename));

  return results;
}

// Define parameters for the zonalStats function.
var params = {
  reducer: ee.Reducer.mean(),
  scale: 30,
  crs: 'EPSG:5070',
  bands: ['ndvi','evi','lswi'],
  bandsRename: ['NDVI', 'EVI', 'LSWI'],
  imgProps: ['LANDSAT_SCENE_ID', 'SPACECRAFT_ID'],
  imgPropsRename: ['img_id', 'satellite'],
  datetimeName: 'date',
  datetimeFormat: 'YYYY-MM-dd'
};

// Extract zonal statistics per point per image.
var plyLandsatStats = zonalStats(landsatColVI, fields, params);
print(plyLandsatStats);

Export.table.toDrive({
  collection: plyLandsatStats,
  folder: 'GRL_Alfalfa',
  description: 'Landsat_VIs_buffer_75m',
  fileFormat: 'CSV'
});
