/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #98ff00 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-97.94166220605274, 35.38908607577019],
          [-97.94166220605274, 35.29078494984226],
          [-97.73257864892383, 35.29078494984226],
          [-97.73257864892383, 35.38908607577019]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Reference: 1. https://developers.google.com/earth-engine/datasets/catalog/LANDSAT_LC08_C02_T1_L2
//           2. https://code.earthengine.google.com/b51fc253acf47ad730651725cb900ec3
//           3. https://groups.google.com/g/google-earth-engine-developers/c/LDRd_YLaW1U/m/AjOks5VEAQAJ

var ls8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
          .filterDate('2020-01-01', '2020-12-31')
          .filterBounds(geometry)
          // .filter(ee.Filter.equals('WRS_ROW', 36))

// Applies scaling factors.
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
}

// Mask out clouds
function CloudMask(image) {
  var QA = image.select('QA_PIXEL');
  var cloudShadowBitMask = ee.Number(2).pow(4).int(); 
  var cloudsBitMask = ee.Number(2).pow(3).int();
  var cirrusBitMask = ee.Number(2).pow(2).int();
  var dilatedCloudsBitMask = ee.Number(2).pow(1).int();
  
  var cloudShadowMask = QA.bitwiseAnd(cloudShadowBitMask).eq(0)
  var cloudsMask = QA.bitwiseAnd(cloudsBitMask).eq(0)
  var cirrusMask = QA.bitwiseAnd(cirrusBitMask).eq(0)
  var dilatedCloudsMask = QA.bitwiseAnd(dilatedCloudsBitMask).eq(0)
  
  var masked = image.updateMask(cloudShadowMask)
                    .updateMask(cloudsMask)
                    .updateMask(cirrusMask)
                    .updateMask(dilatedCloudsMask);
  
  return masked;
}

// Calculate vegetation indices
var vegetationindex=function(img){
          var ndvi=img.normalizedDifference(['SR_B5','SR_B4']).multiply(10000).int16();//ndvi=(nir-red)/(nir+red)
          var lswi=img.normalizedDifference(['SR_B5','SR_B6']).multiply(10000).int16();//lswi=(nir-swir)/(nir+swir)
          var evi=img.expression(
            '2.5 * (nir - red) / (nir + 6 * red - 7.5 * blue + 10000)',
            {
              red: img.select('SR_B4'),    
              nir: img.select('SR_B5'),    
              blue: img.select('SR_B2')   
            }
            ).multiply(10000).int16();

          return img.select([])
                      .addBands([ndvi,evi,lswi])
                      .select([0,1,2],['ndvi','evi','lswi'])
}


var ls8SR = ls8.map(applyScaleFactors);
var ls8SRCloudMasked = ls8SR.map(CloudMask)
var ls8SRCloudMaskedVIs = ls8SRCloudMasked.map(vegetationindex)
print(ls8SRCloudMaskedVIs)

// Get the image with less cloud cover for the same date
var distinctNDVI = ls8SRCloudMaskedVIs.select('ndvi')
                  .sort('DATE_ACQUIRED',true)
                  .sort('CLOUD_COVER',true).distinct('DATE_ACQUIRED')
print(distinctNDVI)

var visualization = {
  bands: ['SR_B4', 'SR_B3', 'SR_B2'],
  min: 0.0,
  max: 0.3,
};

Map.setCenter(-97.862617, 35.345256, 9);

// Map.addLayer(ls8SRCloudMasked.median(), visualization, 'True Color (432)');
Map.addLayer(ls8SRCloudMaskedVIs.select('ndvi').median(), {min:0, max:10000}, 'median ndvi');

var point = ee.Geometry.Point(-97.860112, 35.338213).buffer(500);
Map.addLayer(point, {color:'FF0000'}, 'point')

Map.addLayer(ee.Image(distinctNDVI.sort('DATE_ACQUIRED',false).first()),{},'2020-11-29')
print(Chart.image.series(distinctNDVI, point, ee.Reducer.mean(), 200));
Map.addLayer(ee.Image(distinctNDVI.toList(100).get(1)),{min:0, max:10000},'2020-07-24')
Map.addLayer(ee.Image(distinctNDVI.toList(100).get(2)),{min:0, max:10000},'2020-08-09')
